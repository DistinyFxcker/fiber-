// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
)

func Use(db *gorm.DB) *Query {
	return &Query{
		db:                  db,
		Address:             newAddress(db),
		Admin:               newAdmin(db),
		CacheConfig:         newCacheConfig(db),
		Configure:           newConfigure(db),
		ConfigureTemplate:   newConfigureTemplate(db),
		DocManage:           newDocManage(db),
		Domain:              newDomain(db),
		DomainAgreement:     newDomainAgreement(db),
		DomainForward:       newDomainForward(db),
		DomainSource:        newDomainSource(db),
		DomainSourceConfig:  newDomainSourceConfig(db),
		EmailRecord:         newEmailRecord(db),
		ErrorPageConfig:     newErrorPageConfig(db),
		HeaderConfig:        newHeaderConfig(db),
		LoginRecord:         newLoginRecord(db),
		Node:                newNode(db),
		NodeConfig:          newNodeConfig(db),
		NodeIp:              newNodeIp(db),
		NodeRegion:          newNodeRegion(db),
		PrimaryDomain:       newPrimaryDomain(db),
		Region:              newRegion(db),
		ResourceLabel:       newResourceLabel(db),
		ResourcesLabelBind:  newResourcesLabelBind(db),
		ResourcesLabelValue: newResourcesLabelValue(db),
		ServiceType:         newServiceType(db),
		System:              newSystem(db),
		User:                newUser(db),
		UserGroup:           newUserGroup(db),
		UserGroupRegion:     newUserGroupRegion(db),
		Version:             newVersion(db),
	}
}

type Query struct {
	db *gorm.DB

	Address             address
	Admin               admin
	CacheConfig         cacheConfig
	Configure           configure
	ConfigureTemplate   configureTemplate
	DocManage           docManage
	Domain              domain
	DomainAgreement     domainAgreement
	DomainForward       domainForward
	DomainSource        domainSource
	DomainSourceConfig  domainSourceConfig
	EmailRecord         emailRecord
	ErrorPageConfig     errorPageConfig
	HeaderConfig        headerConfig
	LoginRecord         loginRecord
	Node                node
	NodeConfig          nodeConfig
	NodeIp              nodeIp
	NodeRegion          nodeRegion
	PrimaryDomain       primaryDomain
	Region              region
	ResourceLabel       resourceLabel
	ResourcesLabelBind  resourcesLabelBind
	ResourcesLabelValue resourcesLabelValue
	ServiceType         serviceType
	System              system
	User                user
	UserGroup           userGroup
	UserGroupRegion     userGroupRegion
	Version             version
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                  db,
		Address:             q.Address.clone(db),
		Admin:               q.Admin.clone(db),
		CacheConfig:         q.CacheConfig.clone(db),
		Configure:           q.Configure.clone(db),
		ConfigureTemplate:   q.ConfigureTemplate.clone(db),
		DocManage:           q.DocManage.clone(db),
		Domain:              q.Domain.clone(db),
		DomainAgreement:     q.DomainAgreement.clone(db),
		DomainForward:       q.DomainForward.clone(db),
		DomainSource:        q.DomainSource.clone(db),
		DomainSourceConfig:  q.DomainSourceConfig.clone(db),
		EmailRecord:         q.EmailRecord.clone(db),
		ErrorPageConfig:     q.ErrorPageConfig.clone(db),
		HeaderConfig:        q.HeaderConfig.clone(db),
		LoginRecord:         q.LoginRecord.clone(db),
		Node:                q.Node.clone(db),
		NodeConfig:          q.NodeConfig.clone(db),
		NodeIp:              q.NodeIp.clone(db),
		NodeRegion:          q.NodeRegion.clone(db),
		PrimaryDomain:       q.PrimaryDomain.clone(db),
		Region:              q.Region.clone(db),
		ResourceLabel:       q.ResourceLabel.clone(db),
		ResourcesLabelBind:  q.ResourcesLabelBind.clone(db),
		ResourcesLabelValue: q.ResourcesLabelValue.clone(db),
		ServiceType:         q.ServiceType.clone(db),
		System:              q.System.clone(db),
		User:                q.User.clone(db),
		UserGroup:           q.UserGroup.clone(db),
		UserGroupRegion:     q.UserGroupRegion.clone(db),
		Version:             q.Version.clone(db),
	}
}

type queryCtx struct {
	Address             addressDo
	Admin               adminDo
	CacheConfig         cacheConfigDo
	Configure           configureDo
	ConfigureTemplate   configureTemplateDo
	DocManage           docManageDo
	Domain              domainDo
	DomainAgreement     domainAgreementDo
	DomainForward       domainForwardDo
	DomainSource        domainSourceDo
	DomainSourceConfig  domainSourceConfigDo
	EmailRecord         emailRecordDo
	ErrorPageConfig     errorPageConfigDo
	HeaderConfig        headerConfigDo
	LoginRecord         loginRecordDo
	Node                nodeDo
	NodeConfig          nodeConfigDo
	NodeIp              nodeIpDo
	NodeRegion          nodeRegionDo
	PrimaryDomain       primaryDomainDo
	Region              regionDo
	ResourceLabel       resourceLabelDo
	ResourcesLabelBind  resourcesLabelBindDo
	ResourcesLabelValue resourcesLabelValueDo
	ServiceType         serviceTypeDo
	System              systemDo
	User                userDo
	UserGroup           userGroupDo
	UserGroupRegion     userGroupRegionDo
	Version             versionDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Address:             *q.Address.WithContext(ctx),
		Admin:               *q.Admin.WithContext(ctx),
		CacheConfig:         *q.CacheConfig.WithContext(ctx),
		Configure:           *q.Configure.WithContext(ctx),
		ConfigureTemplate:   *q.ConfigureTemplate.WithContext(ctx),
		DocManage:           *q.DocManage.WithContext(ctx),
		Domain:              *q.Domain.WithContext(ctx),
		DomainAgreement:     *q.DomainAgreement.WithContext(ctx),
		DomainForward:       *q.DomainForward.WithContext(ctx),
		DomainSource:        *q.DomainSource.WithContext(ctx),
		DomainSourceConfig:  *q.DomainSourceConfig.WithContext(ctx),
		EmailRecord:         *q.EmailRecord.WithContext(ctx),
		ErrorPageConfig:     *q.ErrorPageConfig.WithContext(ctx),
		HeaderConfig:        *q.HeaderConfig.WithContext(ctx),
		LoginRecord:         *q.LoginRecord.WithContext(ctx),
		Node:                *q.Node.WithContext(ctx),
		NodeConfig:          *q.NodeConfig.WithContext(ctx),
		NodeIp:              *q.NodeIp.WithContext(ctx),
		NodeRegion:          *q.NodeRegion.WithContext(ctx),
		PrimaryDomain:       *q.PrimaryDomain.WithContext(ctx),
		Region:              *q.Region.WithContext(ctx),
		ResourceLabel:       *q.ResourceLabel.WithContext(ctx),
		ResourcesLabelBind:  *q.ResourcesLabelBind.WithContext(ctx),
		ResourcesLabelValue: *q.ResourcesLabelValue.WithContext(ctx),
		ServiceType:         *q.ServiceType.WithContext(ctx),
		System:              *q.System.WithContext(ctx),
		User:                *q.User.WithContext(ctx),
		UserGroup:           *q.UserGroup.WithContext(ctx),
		UserGroupRegion:     *q.UserGroupRegion.WithContext(ctx),
		Version:             *q.Version.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
