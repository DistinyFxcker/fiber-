// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"go_web_example/gen/dal/model"
)

func newResourcesLabelBind(db *gorm.DB) resourcesLabelBind {
	_resourcesLabelBind := resourcesLabelBind{}

	_resourcesLabelBind.resourcesLabelBindDo.UseDB(db)
	_resourcesLabelBind.resourcesLabelBindDo.UseModel(&model.ResourcesLabelBind{})

	tableName := _resourcesLabelBind.resourcesLabelBindDo.TableName()
	_resourcesLabelBind.ALL = field.NewField(tableName, "*")
	_resourcesLabelBind.Id = field.NewString(tableName, "id")
	_resourcesLabelBind.RelationId = field.NewString(tableName, "relation_id")
	_resourcesLabelBind.RelationType = field.NewInt8(tableName, "relation_type")
	_resourcesLabelBind.LabelValueId = field.NewString(tableName, "label_value_id")
	_resourcesLabelBind.KeyId = field.NewString(tableName, "key_id")
	_resourcesLabelBind.Value = field.NewString(tableName, "value")
	_resourcesLabelBind.Key = field.NewString(tableName, "key")
	_resourcesLabelBind.CreateId = field.NewString(tableName, "create_id")
	_resourcesLabelBind.CreatedAt = field.NewInt64(tableName, "created_at")
	_resourcesLabelBind.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_resourcesLabelBind.fillFieldMap()

	return _resourcesLabelBind
}

type resourcesLabelBind struct {
	resourcesLabelBindDo resourcesLabelBindDo

	ALL          field.Field
	Id           field.String
	RelationId   field.String
	RelationType field.Int8
	LabelValueId field.String
	KeyId        field.String
	Value        field.String
	Key          field.String
	CreateId     field.String
	CreatedAt    field.Int64
	UpdatedAt    field.Int64

	fieldMap map[string]field.Expr
}

func (r resourcesLabelBind) Table(newTableName string) *resourcesLabelBind {
	r.resourcesLabelBindDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r resourcesLabelBind) As(alias string) *resourcesLabelBind {
	r.resourcesLabelBindDo.DO = *(r.resourcesLabelBindDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *resourcesLabelBind) updateTableName(table string) *resourcesLabelBind {
	r.ALL = field.NewField(table, "*")
	r.Id = field.NewString(table, "id")
	r.RelationId = field.NewString(table, "relation_id")
	r.RelationType = field.NewInt8(table, "relation_type")
	r.LabelValueId = field.NewString(table, "label_value_id")
	r.KeyId = field.NewString(table, "key_id")
	r.Value = field.NewString(table, "value")
	r.Key = field.NewString(table, "key")
	r.CreateId = field.NewString(table, "create_id")
	r.CreatedAt = field.NewInt64(table, "created_at")
	r.UpdatedAt = field.NewInt64(table, "updated_at")

	r.fillFieldMap()

	return r
}

func (r *resourcesLabelBind) WithContext(ctx context.Context) *resourcesLabelBindDo {
	return r.resourcesLabelBindDo.WithContext(ctx)
}

func (r resourcesLabelBind) TableName() string { return r.resourcesLabelBindDo.TableName() }

func (r resourcesLabelBind) Alias() string { return r.resourcesLabelBindDo.Alias() }

func (r *resourcesLabelBind) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *resourcesLabelBind) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 10)
	r.fieldMap["id"] = r.Id
	r.fieldMap["relation_id"] = r.RelationId
	r.fieldMap["relation_type"] = r.RelationType
	r.fieldMap["label_value_id"] = r.LabelValueId
	r.fieldMap["key_id"] = r.KeyId
	r.fieldMap["value"] = r.Value
	r.fieldMap["key"] = r.Key
	r.fieldMap["create_id"] = r.CreateId
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
}

func (r resourcesLabelBind) clone(db *gorm.DB) resourcesLabelBind {
	r.resourcesLabelBindDo.ReplaceDB(db)
	return r
}

type resourcesLabelBindDo struct{ gen.DO }

func (r resourcesLabelBindDo) Debug() *resourcesLabelBindDo {
	return r.withDO(r.DO.Debug())
}

func (r resourcesLabelBindDo) WithContext(ctx context.Context) *resourcesLabelBindDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r resourcesLabelBindDo) Clauses(conds ...clause.Expression) *resourcesLabelBindDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r resourcesLabelBindDo) Returning(value interface{}, columns ...string) *resourcesLabelBindDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r resourcesLabelBindDo) Not(conds ...gen.Condition) *resourcesLabelBindDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r resourcesLabelBindDo) Or(conds ...gen.Condition) *resourcesLabelBindDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r resourcesLabelBindDo) Select(conds ...field.Expr) *resourcesLabelBindDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r resourcesLabelBindDo) Where(conds ...gen.Condition) *resourcesLabelBindDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r resourcesLabelBindDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *resourcesLabelBindDo {
	return r.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (r resourcesLabelBindDo) Order(conds ...field.Expr) *resourcesLabelBindDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r resourcesLabelBindDo) Distinct(cols ...field.Expr) *resourcesLabelBindDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r resourcesLabelBindDo) Omit(cols ...field.Expr) *resourcesLabelBindDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r resourcesLabelBindDo) Join(table schema.Tabler, on ...field.Expr) *resourcesLabelBindDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r resourcesLabelBindDo) LeftJoin(table schema.Tabler, on ...field.Expr) *resourcesLabelBindDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r resourcesLabelBindDo) RightJoin(table schema.Tabler, on ...field.Expr) *resourcesLabelBindDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r resourcesLabelBindDo) Group(cols ...field.Expr) *resourcesLabelBindDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r resourcesLabelBindDo) Having(conds ...gen.Condition) *resourcesLabelBindDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r resourcesLabelBindDo) Limit(limit int) *resourcesLabelBindDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r resourcesLabelBindDo) Offset(offset int) *resourcesLabelBindDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r resourcesLabelBindDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *resourcesLabelBindDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r resourcesLabelBindDo) Unscoped() *resourcesLabelBindDo {
	return r.withDO(r.DO.Unscoped())
}

func (r resourcesLabelBindDo) Create(values ...*model.ResourcesLabelBind) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r resourcesLabelBindDo) CreateInBatches(values []*model.ResourcesLabelBind, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r resourcesLabelBindDo) Save(values ...*model.ResourcesLabelBind) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r resourcesLabelBindDo) First() (*model.ResourcesLabelBind, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ResourcesLabelBind), nil
	}
}

func (r resourcesLabelBindDo) Take() (*model.ResourcesLabelBind, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ResourcesLabelBind), nil
	}
}

func (r resourcesLabelBindDo) Last() (*model.ResourcesLabelBind, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ResourcesLabelBind), nil
	}
}

func (r resourcesLabelBindDo) Find() ([]*model.ResourcesLabelBind, error) {
	result, err := r.DO.Find()
	return result.([]*model.ResourcesLabelBind), err
}

func (r resourcesLabelBindDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ResourcesLabelBind, err error) {
	buf := make([]*model.ResourcesLabelBind, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r resourcesLabelBindDo) FindInBatches(result *[]*model.ResourcesLabelBind, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r resourcesLabelBindDo) Attrs(attrs ...field.AssignExpr) *resourcesLabelBindDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r resourcesLabelBindDo) Assign(attrs ...field.AssignExpr) *resourcesLabelBindDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r resourcesLabelBindDo) Joins(fields ...field.RelationField) *resourcesLabelBindDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r resourcesLabelBindDo) Preload(fields ...field.RelationField) *resourcesLabelBindDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r resourcesLabelBindDo) FirstOrInit() (*model.ResourcesLabelBind, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ResourcesLabelBind), nil
	}
}

func (r resourcesLabelBindDo) FirstOrCreate() (*model.ResourcesLabelBind, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ResourcesLabelBind), nil
	}
}

func (r resourcesLabelBindDo) FindByPage(offset int, limit int) (result []*model.ResourcesLabelBind, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r resourcesLabelBindDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r *resourcesLabelBindDo) withDO(do gen.Dao) *resourcesLabelBindDo {
	r.DO = *do.(*gen.DO)
	return r
}
