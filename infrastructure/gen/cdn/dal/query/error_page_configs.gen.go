// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"cdnFiber/infrastructure/gen/cdn/dal/model"
)

func newErrorPageConfig(db *gorm.DB) errorPageConfig {
	_errorPageConfig := errorPageConfig{}

	_errorPageConfig.errorPageConfigDo.UseDB(db)
	_errorPageConfig.errorPageConfigDo.UseModel(&model.ErrorPageConfig{})

	tableName := _errorPageConfig.errorPageConfigDo.TableName()
	_errorPageConfig.ALL = field.NewField(tableName, "*")
	_errorPageConfig.Id = field.NewString(tableName, "id")
	_errorPageConfig.RelationId = field.NewString(tableName, "relation_id")
	_errorPageConfig.RelationType = field.NewInt(tableName, "relation_type")
	_errorPageConfig.ConfigureId = field.NewString(tableName, "configure_id")
	_errorPageConfig.Name = field.NewString(tableName, "name")
	_errorPageConfig.StatusCode = field.NewInt(tableName, "status_code")
	_errorPageConfig.Status = field.NewInt(tableName, "status")
	_errorPageConfig.Type = field.NewInt(tableName, "type")
	_errorPageConfig.DestinationAddress = field.NewString(tableName, "destination_address")
	_errorPageConfig.CustomContext = field.NewString(tableName, "custom_context")
	_errorPageConfig.CreatedAt = field.NewInt64(tableName, "created_at")
	_errorPageConfig.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_errorPageConfig.fillFieldMap()

	return _errorPageConfig
}

type errorPageConfig struct {
	errorPageConfigDo errorPageConfigDo

	ALL                field.Field
	Id                 field.String
	RelationId         field.String
	RelationType       field.Int
	ConfigureId        field.String
	Name               field.String
	StatusCode         field.Int
	Status             field.Int
	Type               field.Int
	DestinationAddress field.String
	CustomContext      field.String
	CreatedAt          field.Int64
	UpdatedAt          field.Int64

	fieldMap map[string]field.Expr
}

func (e errorPageConfig) Table(newTableName string) *errorPageConfig {
	e.errorPageConfigDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e errorPageConfig) As(alias string) *errorPageConfig {
	e.errorPageConfigDo.DO = *(e.errorPageConfigDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *errorPageConfig) updateTableName(table string) *errorPageConfig {
	e.ALL = field.NewField(table, "*")
	e.Id = field.NewString(table, "id")
	e.RelationId = field.NewString(table, "relation_id")
	e.RelationType = field.NewInt(table, "relation_type")
	e.ConfigureId = field.NewString(table, "configure_id")
	e.Name = field.NewString(table, "name")
	e.StatusCode = field.NewInt(table, "status_code")
	e.Status = field.NewInt(table, "status")
	e.Type = field.NewInt(table, "type")
	e.DestinationAddress = field.NewString(table, "destination_address")
	e.CustomContext = field.NewString(table, "custom_context")
	e.CreatedAt = field.NewInt64(table, "created_at")
	e.UpdatedAt = field.NewInt64(table, "updated_at")

	e.fillFieldMap()

	return e
}

func (e *errorPageConfig) WithContext(ctx context.Context) *errorPageConfigDo {
	return e.errorPageConfigDo.WithContext(ctx)
}

func (e errorPageConfig) TableName() string { return e.errorPageConfigDo.TableName() }

func (e errorPageConfig) Alias() string { return e.errorPageConfigDo.Alias() }

func (e *errorPageConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *errorPageConfig) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 12)
	e.fieldMap["id"] = e.Id
	e.fieldMap["relation_id"] = e.RelationId
	e.fieldMap["relation_type"] = e.RelationType
	e.fieldMap["configure_id"] = e.ConfigureId
	e.fieldMap["name"] = e.Name
	e.fieldMap["status_code"] = e.StatusCode
	e.fieldMap["status"] = e.Status
	e.fieldMap["type"] = e.Type
	e.fieldMap["destination_address"] = e.DestinationAddress
	e.fieldMap["custom_context"] = e.CustomContext
	e.fieldMap["created_at"] = e.CreatedAt
	e.fieldMap["updated_at"] = e.UpdatedAt
}

func (e errorPageConfig) clone(db *gorm.DB) errorPageConfig {
	e.errorPageConfigDo.ReplaceDB(db)
	return e
}

type errorPageConfigDo struct{ gen.DO }

func (e errorPageConfigDo) Debug() *errorPageConfigDo {
	return e.withDO(e.DO.Debug())
}

func (e errorPageConfigDo) WithContext(ctx context.Context) *errorPageConfigDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e errorPageConfigDo) Clauses(conds ...clause.Expression) *errorPageConfigDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e errorPageConfigDo) Returning(value interface{}, columns ...string) *errorPageConfigDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e errorPageConfigDo) Not(conds ...gen.Condition) *errorPageConfigDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e errorPageConfigDo) Or(conds ...gen.Condition) *errorPageConfigDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e errorPageConfigDo) Select(conds ...field.Expr) *errorPageConfigDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e errorPageConfigDo) Where(conds ...gen.Condition) *errorPageConfigDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e errorPageConfigDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *errorPageConfigDo {
	return e.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (e errorPageConfigDo) Order(conds ...field.Expr) *errorPageConfigDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e errorPageConfigDo) Distinct(cols ...field.Expr) *errorPageConfigDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e errorPageConfigDo) Omit(cols ...field.Expr) *errorPageConfigDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e errorPageConfigDo) Join(table schema.Tabler, on ...field.Expr) *errorPageConfigDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e errorPageConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) *errorPageConfigDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e errorPageConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) *errorPageConfigDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e errorPageConfigDo) Group(cols ...field.Expr) *errorPageConfigDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e errorPageConfigDo) Having(conds ...gen.Condition) *errorPageConfigDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e errorPageConfigDo) Limit(limit int) *errorPageConfigDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e errorPageConfigDo) Offset(offset int) *errorPageConfigDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e errorPageConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *errorPageConfigDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e errorPageConfigDo) Unscoped() *errorPageConfigDo {
	return e.withDO(e.DO.Unscoped())
}

func (e errorPageConfigDo) Create(values ...*model.ErrorPageConfig) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e errorPageConfigDo) CreateInBatches(values []*model.ErrorPageConfig, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e errorPageConfigDo) Save(values ...*model.ErrorPageConfig) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e errorPageConfigDo) First() (*model.ErrorPageConfig, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ErrorPageConfig), nil
	}
}

func (e errorPageConfigDo) Take() (*model.ErrorPageConfig, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ErrorPageConfig), nil
	}
}

func (e errorPageConfigDo) Last() (*model.ErrorPageConfig, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ErrorPageConfig), nil
	}
}

func (e errorPageConfigDo) Find() ([]*model.ErrorPageConfig, error) {
	result, err := e.DO.Find()
	return result.([]*model.ErrorPageConfig), err
}

func (e errorPageConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ErrorPageConfig, err error) {
	buf := make([]*model.ErrorPageConfig, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e errorPageConfigDo) FindInBatches(result *[]*model.ErrorPageConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e errorPageConfigDo) Attrs(attrs ...field.AssignExpr) *errorPageConfigDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e errorPageConfigDo) Assign(attrs ...field.AssignExpr) *errorPageConfigDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e errorPageConfigDo) Joins(fields ...field.RelationField) *errorPageConfigDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e errorPageConfigDo) Preload(fields ...field.RelationField) *errorPageConfigDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e errorPageConfigDo) FirstOrInit() (*model.ErrorPageConfig, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ErrorPageConfig), nil
	}
}

func (e errorPageConfigDo) FirstOrCreate() (*model.ErrorPageConfig, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ErrorPageConfig), nil
	}
}

func (e errorPageConfigDo) FindByPage(offset int, limit int) (result []*model.ErrorPageConfig, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e errorPageConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e *errorPageConfigDo) withDO(do gen.Dao) *errorPageConfigDo {
	e.DO = *do.(*gen.DO)
	return e
}
