// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"go_web_example/gen/dal/model"
)

func newLoginRecord(db *gorm.DB) loginRecord {
	_loginRecord := loginRecord{}

	_loginRecord.loginRecordDo.UseDB(db)
	_loginRecord.loginRecordDo.UseModel(&model.LoginRecord{})

	tableName := _loginRecord.loginRecordDo.TableName()
	_loginRecord.ALL = field.NewField(tableName, "*")
	_loginRecord.Id = field.NewString(tableName, "id")
	_loginRecord.Uid = field.NewString(tableName, "uid")
	_loginRecord.Type = field.NewInt64(tableName, "type")
	_loginRecord.IP = field.NewString(tableName, "ip")
	_loginRecord.Region = field.NewString(tableName, "region")
	_loginRecord.DisplayType = field.NewInt64(tableName, "display_type")
	_loginRecord.Device = field.NewString(tableName, "device")
	_loginRecord.Os = field.NewString(tableName, "os")
	_loginRecord.OsVersion = field.NewString(tableName, "os_version")
	_loginRecord.Browser = field.NewString(tableName, "browser")
	_loginRecord.BrowserVision = field.NewString(tableName, "browser_vision")
	_loginRecord.CreatedAt = field.NewInt64(tableName, "created_at")

	_loginRecord.fillFieldMap()

	return _loginRecord
}

type loginRecord struct {
	loginRecordDo loginRecordDo

	ALL           field.Field
	Id            field.String
	Uid           field.String
	Type          field.Int64
	IP            field.String
	Region        field.String
	DisplayType   field.Int64
	Device        field.String
	Os            field.String
	OsVersion     field.String
	Browser       field.String
	BrowserVision field.String
	CreatedAt     field.Int64

	fieldMap map[string]field.Expr
}

func (l loginRecord) Table(newTableName string) *loginRecord {
	l.loginRecordDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l loginRecord) As(alias string) *loginRecord {
	l.loginRecordDo.DO = *(l.loginRecordDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *loginRecord) updateTableName(table string) *loginRecord {
	l.ALL = field.NewField(table, "*")
	l.Id = field.NewString(table, "id")
	l.Uid = field.NewString(table, "uid")
	l.Type = field.NewInt64(table, "type")
	l.IP = field.NewString(table, "ip")
	l.Region = field.NewString(table, "region")
	l.DisplayType = field.NewInt64(table, "display_type")
	l.Device = field.NewString(table, "device")
	l.Os = field.NewString(table, "os")
	l.OsVersion = field.NewString(table, "os_version")
	l.Browser = field.NewString(table, "browser")
	l.BrowserVision = field.NewString(table, "browser_vision")
	l.CreatedAt = field.NewInt64(table, "created_at")

	l.fillFieldMap()

	return l
}

func (l *loginRecord) WithContext(ctx context.Context) *loginRecordDo {
	return l.loginRecordDo.WithContext(ctx)
}

func (l loginRecord) TableName() string { return l.loginRecordDo.TableName() }

func (l loginRecord) Alias() string { return l.loginRecordDo.Alias() }

func (l *loginRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *loginRecord) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 12)
	l.fieldMap["id"] = l.Id
	l.fieldMap["uid"] = l.Uid
	l.fieldMap["type"] = l.Type
	l.fieldMap["ip"] = l.IP
	l.fieldMap["region"] = l.Region
	l.fieldMap["display_type"] = l.DisplayType
	l.fieldMap["device"] = l.Device
	l.fieldMap["os"] = l.Os
	l.fieldMap["os_version"] = l.OsVersion
	l.fieldMap["browser"] = l.Browser
	l.fieldMap["browser_vision"] = l.BrowserVision
	l.fieldMap["created_at"] = l.CreatedAt
}

func (l loginRecord) clone(db *gorm.DB) loginRecord {
	l.loginRecordDo.ReplaceDB(db)
	return l
}

type loginRecordDo struct{ gen.DO }

func (l loginRecordDo) Debug() *loginRecordDo {
	return l.withDO(l.DO.Debug())
}

func (l loginRecordDo) WithContext(ctx context.Context) *loginRecordDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l loginRecordDo) Clauses(conds ...clause.Expression) *loginRecordDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l loginRecordDo) Returning(value interface{}, columns ...string) *loginRecordDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l loginRecordDo) Not(conds ...gen.Condition) *loginRecordDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l loginRecordDo) Or(conds ...gen.Condition) *loginRecordDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l loginRecordDo) Select(conds ...field.Expr) *loginRecordDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l loginRecordDo) Where(conds ...gen.Condition) *loginRecordDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l loginRecordDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *loginRecordDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l loginRecordDo) Order(conds ...field.Expr) *loginRecordDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l loginRecordDo) Distinct(cols ...field.Expr) *loginRecordDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l loginRecordDo) Omit(cols ...field.Expr) *loginRecordDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l loginRecordDo) Join(table schema.Tabler, on ...field.Expr) *loginRecordDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l loginRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) *loginRecordDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l loginRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) *loginRecordDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l loginRecordDo) Group(cols ...field.Expr) *loginRecordDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l loginRecordDo) Having(conds ...gen.Condition) *loginRecordDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l loginRecordDo) Limit(limit int) *loginRecordDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l loginRecordDo) Offset(offset int) *loginRecordDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l loginRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *loginRecordDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l loginRecordDo) Unscoped() *loginRecordDo {
	return l.withDO(l.DO.Unscoped())
}

func (l loginRecordDo) Create(values ...*model.LoginRecord) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l loginRecordDo) CreateInBatches(values []*model.LoginRecord, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l loginRecordDo) Save(values ...*model.LoginRecord) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l loginRecordDo) First() (*model.LoginRecord, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LoginRecord), nil
	}
}

func (l loginRecordDo) Take() (*model.LoginRecord, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LoginRecord), nil
	}
}

func (l loginRecordDo) Last() (*model.LoginRecord, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LoginRecord), nil
	}
}

func (l loginRecordDo) Find() ([]*model.LoginRecord, error) {
	result, err := l.DO.Find()
	return result.([]*model.LoginRecord), err
}

func (l loginRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LoginRecord, err error) {
	buf := make([]*model.LoginRecord, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l loginRecordDo) FindInBatches(result *[]*model.LoginRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l loginRecordDo) Attrs(attrs ...field.AssignExpr) *loginRecordDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l loginRecordDo) Assign(attrs ...field.AssignExpr) *loginRecordDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l loginRecordDo) Joins(fields ...field.RelationField) *loginRecordDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l loginRecordDo) Preload(fields ...field.RelationField) *loginRecordDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l loginRecordDo) FirstOrInit() (*model.LoginRecord, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LoginRecord), nil
	}
}

func (l loginRecordDo) FirstOrCreate() (*model.LoginRecord, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LoginRecord), nil
	}
}

func (l loginRecordDo) FindByPage(offset int, limit int) (result []*model.LoginRecord, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l loginRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l *loginRecordDo) withDO(do gen.Dao) *loginRecordDo {
	l.DO = *do.(*gen.DO)
	return l
}
