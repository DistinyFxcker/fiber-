// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"go_web_example/gen/dal/model"
)

func newDomain(db *gorm.DB) domain {
	_domain := domain{}

	_domain.domainDo.UseDB(db)
	_domain.domainDo.UseModel(&model.Domain{})

	tableName := _domain.domainDo.TableName()
	_domain.ALL = field.NewField(tableName, "*")
	_domain.Id = field.NewString(tableName, "id")
	_domain.Name = field.NewString(tableName, "name")
	_domain.Status = field.NewInt(tableName, "status")
	_domain.NsState = field.NewInt(tableName, "ns_state")
	_domain.Domain = field.NewString(tableName, "domain")
	_domain.MasterDomain = field.NewString(tableName, "master_domain")
	_domain.DomainType = field.NewInt(tableName, "domain_type")
	_domain.DnsState = field.NewInt(tableName, "dns_state")
	_domain.Region = field.NewString(tableName, "region")
	_domain.BusinessType = field.NewString(tableName, "business_type")
	_domain.DomainSourceSortType = field.NewInt(tableName, "domain_source_sort_type")
	_domain.DomainSourceType = field.NewInt(tableName, "domain_source_type")
	_domain.BillingMethod = field.NewInt(tableName, "billing_method")
	_domain.Cname = field.NewString(tableName, "cname")
	_domain.PrimaryDomainId = field.NewString(tableName, "primary_domain_id")
	_domain.DomainForward = field.NewInt(tableName, "domain_forward")
	_domain.Http2 = field.NewInt(tableName, "http2")
	_domain.GzipCompressSwitch = field.NewInt(tableName, "gzip_compress_switch")
	_domain.AccessControl = field.NewInt(tableName, "access_control")
	_domain.AntiTheftChainSwitch = field.NewInt(tableName, "anti_theft_chain_switch")
	_domain.BlackListSwitch = field.NewInt(tableName, "black_list_switch")
	_domain.WhiteListSwitch = field.NewInt(tableName, "white_list_switch")
	_domain.IgnoreURL = field.NewInt(tableName, "ignore_url")
	_domain.CacheSource = field.NewInt(tableName, "cache_source")
	_domain.GzipCompress = field.NewInt(tableName, "gzip_compress")
	_domain.DomainAgreementType = field.NewInt(tableName, "domain_agreement_type")
	_domain.Certificate = field.NewString(tableName, "certificate")
	_domain.Key = field.NewString(tableName, "key")
	_domain.CertificateAuto = field.NewString(tableName, "certificate_auto")
	_domain.KeyAuto = field.NewString(tableName, "key_auto")
	_domain.CertificateBrand = field.NewString(tableName, "certificate_brand")
	_domain.Arithmetic = field.NewString(tableName, "arithmetic")
	_domain.Validate = field.NewString(tableName, "validate")
	_domain.CertificateType = field.NewInt64(tableName, "certificate_type")
	_domain.HSCStatus = field.NewInt(tableName, "hsc_status")
	_domain.OverTime = field.NewInt64(tableName, "over_time")
	_domain.OverTimeAuto = field.NewInt64(tableName, "over_time_auto")
	_domain.EmptyReferer = field.NewInt(tableName, "empty_referer")
	_domain.BlackListDomain = field.NewString(tableName, "black_list_domain")
	_domain.WhiteListDomain = field.NewString(tableName, "white_list_domain")
	_domain.EstablishId = field.NewString(tableName, "establish_id")
	_domain.EstablishType = field.NewInt(tableName, "establish_type")
	_domain.EstablishName = field.NewString(tableName, "establish_name")
	_domain.CreatedAt = field.NewInt64(tableName, "created_at")
	_domain.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_domain.fillFieldMap()

	return _domain
}

type domain struct {
	domainDo domainDo

	ALL                  field.Field
	Id                   field.String
	Name                 field.String
	Status               field.Int
	NsState              field.Int
	Domain               field.String
	MasterDomain         field.String
	DomainType           field.Int
	DnsState             field.Int
	Region               field.String
	BusinessType         field.String
	DomainSourceSortType field.Int
	DomainSourceType     field.Int
	BillingMethod        field.Int
	Cname                field.String
	PrimaryDomainId      field.String
	DomainForward        field.Int
	Http2                field.Int
	GzipCompressSwitch   field.Int
	AccessControl        field.Int
	AntiTheftChainSwitch field.Int
	BlackListSwitch      field.Int
	WhiteListSwitch      field.Int
	IgnoreURL            field.Int
	CacheSource          field.Int
	GzipCompress         field.Int
	DomainAgreementType  field.Int
	Certificate          field.String
	Key                  field.String
	CertificateAuto      field.String
	KeyAuto              field.String
	CertificateBrand     field.String
	Arithmetic           field.String
	Validate             field.String
	CertificateType      field.Int64
	HSCStatus            field.Int
	OverTime             field.Int64
	OverTimeAuto         field.Int64
	EmptyReferer         field.Int
	BlackListDomain      field.String
	WhiteListDomain      field.String
	EstablishId          field.String
	EstablishType        field.Int
	EstablishName        field.String
	CreatedAt            field.Int64
	UpdatedAt            field.Int64

	fieldMap map[string]field.Expr
}

func (d domain) Table(newTableName string) *domain {
	d.domainDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d domain) As(alias string) *domain {
	d.domainDo.DO = *(d.domainDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *domain) updateTableName(table string) *domain {
	d.ALL = field.NewField(table, "*")
	d.Id = field.NewString(table, "id")
	d.Name = field.NewString(table, "name")
	d.Status = field.NewInt(table, "status")
	d.NsState = field.NewInt(table, "ns_state")
	d.Domain = field.NewString(table, "domain")
	d.MasterDomain = field.NewString(table, "master_domain")
	d.DomainType = field.NewInt(table, "domain_type")
	d.DnsState = field.NewInt(table, "dns_state")
	d.Region = field.NewString(table, "region")
	d.BusinessType = field.NewString(table, "business_type")
	d.DomainSourceSortType = field.NewInt(table, "domain_source_sort_type")
	d.DomainSourceType = field.NewInt(table, "domain_source_type")
	d.BillingMethod = field.NewInt(table, "billing_method")
	d.Cname = field.NewString(table, "cname")
	d.PrimaryDomainId = field.NewString(table, "primary_domain_id")
	d.DomainForward = field.NewInt(table, "domain_forward")
	d.Http2 = field.NewInt(table, "http2")
	d.GzipCompressSwitch = field.NewInt(table, "gzip_compress_switch")
	d.AccessControl = field.NewInt(table, "access_control")
	d.AntiTheftChainSwitch = field.NewInt(table, "anti_theft_chain_switch")
	d.BlackListSwitch = field.NewInt(table, "black_list_switch")
	d.WhiteListSwitch = field.NewInt(table, "white_list_switch")
	d.IgnoreURL = field.NewInt(table, "ignore_url")
	d.CacheSource = field.NewInt(table, "cache_source")
	d.GzipCompress = field.NewInt(table, "gzip_compress")
	d.DomainAgreementType = field.NewInt(table, "domain_agreement_type")
	d.Certificate = field.NewString(table, "certificate")
	d.Key = field.NewString(table, "key")
	d.CertificateAuto = field.NewString(table, "certificate_auto")
	d.KeyAuto = field.NewString(table, "key_auto")
	d.CertificateBrand = field.NewString(table, "certificate_brand")
	d.Arithmetic = field.NewString(table, "arithmetic")
	d.Validate = field.NewString(table, "validate")
	d.CertificateType = field.NewInt64(table, "certificate_type")
	d.HSCStatus = field.NewInt(table, "hsc_status")
	d.OverTime = field.NewInt64(table, "over_time")
	d.OverTimeAuto = field.NewInt64(table, "over_time_auto")
	d.EmptyReferer = field.NewInt(table, "empty_referer")
	d.BlackListDomain = field.NewString(table, "black_list_domain")
	d.WhiteListDomain = field.NewString(table, "white_list_domain")
	d.EstablishId = field.NewString(table, "establish_id")
	d.EstablishType = field.NewInt(table, "establish_type")
	d.EstablishName = field.NewString(table, "establish_name")
	d.CreatedAt = field.NewInt64(table, "created_at")
	d.UpdatedAt = field.NewInt64(table, "updated_at")

	d.fillFieldMap()

	return d
}

func (d *domain) WithContext(ctx context.Context) *domainDo { return d.domainDo.WithContext(ctx) }

func (d domain) TableName() string { return d.domainDo.TableName() }

func (d domain) Alias() string { return d.domainDo.Alias() }

func (d *domain) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *domain) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 45)
	d.fieldMap["id"] = d.Id
	d.fieldMap["name"] = d.Name
	d.fieldMap["status"] = d.Status
	d.fieldMap["ns_state"] = d.NsState
	d.fieldMap["domain"] = d.Domain
	d.fieldMap["master_domain"] = d.MasterDomain
	d.fieldMap["domain_type"] = d.DomainType
	d.fieldMap["dns_state"] = d.DnsState
	d.fieldMap["region"] = d.Region
	d.fieldMap["business_type"] = d.BusinessType
	d.fieldMap["domain_source_sort_type"] = d.DomainSourceSortType
	d.fieldMap["domain_source_type"] = d.DomainSourceType
	d.fieldMap["billing_method"] = d.BillingMethod
	d.fieldMap["cname"] = d.Cname
	d.fieldMap["primary_domain_id"] = d.PrimaryDomainId
	d.fieldMap["domain_forward"] = d.DomainForward
	d.fieldMap["http2"] = d.Http2
	d.fieldMap["gzip_compress_switch"] = d.GzipCompressSwitch
	d.fieldMap["access_control"] = d.AccessControl
	d.fieldMap["anti_theft_chain_switch"] = d.AntiTheftChainSwitch
	d.fieldMap["black_list_switch"] = d.BlackListSwitch
	d.fieldMap["white_list_switch"] = d.WhiteListSwitch
	d.fieldMap["ignore_url"] = d.IgnoreURL
	d.fieldMap["cache_source"] = d.CacheSource
	d.fieldMap["gzip_compress"] = d.GzipCompress
	d.fieldMap["domain_agreement_type"] = d.DomainAgreementType
	d.fieldMap["certificate"] = d.Certificate
	d.fieldMap["key"] = d.Key
	d.fieldMap["certificate_auto"] = d.CertificateAuto
	d.fieldMap["key_auto"] = d.KeyAuto
	d.fieldMap["certificate_brand"] = d.CertificateBrand
	d.fieldMap["arithmetic"] = d.Arithmetic
	d.fieldMap["validate"] = d.Validate
	d.fieldMap["certificate_type"] = d.CertificateType
	d.fieldMap["hsc_status"] = d.HSCStatus
	d.fieldMap["over_time"] = d.OverTime
	d.fieldMap["over_time_auto"] = d.OverTimeAuto
	d.fieldMap["empty_referer"] = d.EmptyReferer
	d.fieldMap["black_list_domain"] = d.BlackListDomain
	d.fieldMap["white_list_domain"] = d.WhiteListDomain
	d.fieldMap["establish_id"] = d.EstablishId
	d.fieldMap["establish_type"] = d.EstablishType
	d.fieldMap["establish_name"] = d.EstablishName
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
}

func (d domain) clone(db *gorm.DB) domain {
	d.domainDo.ReplaceDB(db)
	return d
}

type domainDo struct{ gen.DO }

func (d domainDo) Debug() *domainDo {
	return d.withDO(d.DO.Debug())
}

func (d domainDo) WithContext(ctx context.Context) *domainDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d domainDo) Clauses(conds ...clause.Expression) *domainDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d domainDo) Returning(value interface{}, columns ...string) *domainDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d domainDo) Not(conds ...gen.Condition) *domainDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d domainDo) Or(conds ...gen.Condition) *domainDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d domainDo) Select(conds ...field.Expr) *domainDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d domainDo) Where(conds ...gen.Condition) *domainDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d domainDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *domainDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d domainDo) Order(conds ...field.Expr) *domainDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d domainDo) Distinct(cols ...field.Expr) *domainDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d domainDo) Omit(cols ...field.Expr) *domainDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d domainDo) Join(table schema.Tabler, on ...field.Expr) *domainDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d domainDo) LeftJoin(table schema.Tabler, on ...field.Expr) *domainDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d domainDo) RightJoin(table schema.Tabler, on ...field.Expr) *domainDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d domainDo) Group(cols ...field.Expr) *domainDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d domainDo) Having(conds ...gen.Condition) *domainDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d domainDo) Limit(limit int) *domainDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d domainDo) Offset(offset int) *domainDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d domainDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *domainDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d domainDo) Unscoped() *domainDo {
	return d.withDO(d.DO.Unscoped())
}

func (d domainDo) Create(values ...*model.Domain) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d domainDo) CreateInBatches(values []*model.Domain, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d domainDo) Save(values ...*model.Domain) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d domainDo) First() (*model.Domain, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Domain), nil
	}
}

func (d domainDo) Take() (*model.Domain, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Domain), nil
	}
}

func (d domainDo) Last() (*model.Domain, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Domain), nil
	}
}

func (d domainDo) Find() ([]*model.Domain, error) {
	result, err := d.DO.Find()
	return result.([]*model.Domain), err
}

func (d domainDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Domain, err error) {
	buf := make([]*model.Domain, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d domainDo) FindInBatches(result *[]*model.Domain, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d domainDo) Attrs(attrs ...field.AssignExpr) *domainDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d domainDo) Assign(attrs ...field.AssignExpr) *domainDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d domainDo) Joins(fields ...field.RelationField) *domainDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d domainDo) Preload(fields ...field.RelationField) *domainDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d domainDo) FirstOrInit() (*model.Domain, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Domain), nil
	}
}

func (d domainDo) FirstOrCreate() (*model.Domain, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Domain), nil
	}
}

func (d domainDo) FindByPage(offset int, limit int) (result []*model.Domain, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d domainDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d *domainDo) withDO(do gen.Dao) *domainDo {
	d.DO = *do.(*gen.DO)
	return d
}
