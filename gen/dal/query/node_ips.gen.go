// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"go_web_example/gen/dal/model"
)

func newNodeIp(db *gorm.DB) nodeIp {
	_nodeIp := nodeIp{}

	_nodeIp.nodeIpDo.UseDB(db)
	_nodeIp.nodeIpDo.UseModel(&model.NodeIp{})

	tableName := _nodeIp.nodeIpDo.TableName()
	_nodeIp.ALL = field.NewField(tableName, "*")
	_nodeIp.Id = field.NewString(tableName, "id")
	_nodeIp.Ip = field.NewString(tableName, "ip")
	_nodeIp.NodeId = field.NewString(tableName, "node_id")
	_nodeIp.Type = field.NewInt(tableName, "type")
	_nodeIp.IsMaster = field.NewInt(tableName, "is_master")
	_nodeIp.CreatedAt = field.NewInt64(tableName, "created_at")
	_nodeIp.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_nodeIp.fillFieldMap()

	return _nodeIp
}

type nodeIp struct {
	nodeIpDo nodeIpDo

	ALL       field.Field
	Id        field.String
	Ip        field.String
	NodeId    field.String
	Type      field.Int
	IsMaster  field.Int
	CreatedAt field.Int64
	UpdatedAt field.Int64

	fieldMap map[string]field.Expr
}

func (n nodeIp) Table(newTableName string) *nodeIp {
	n.nodeIpDo.UseTable(newTableName)
	return n.updateTableName(newTableName)
}

func (n nodeIp) As(alias string) *nodeIp {
	n.nodeIpDo.DO = *(n.nodeIpDo.As(alias).(*gen.DO))
	return n.updateTableName(alias)
}

func (n *nodeIp) updateTableName(table string) *nodeIp {
	n.ALL = field.NewField(table, "*")
	n.Id = field.NewString(table, "id")
	n.Ip = field.NewString(table, "ip")
	n.NodeId = field.NewString(table, "node_id")
	n.Type = field.NewInt(table, "type")
	n.IsMaster = field.NewInt(table, "is_master")
	n.CreatedAt = field.NewInt64(table, "created_at")
	n.UpdatedAt = field.NewInt64(table, "updated_at")

	n.fillFieldMap()

	return n
}

func (n *nodeIp) WithContext(ctx context.Context) *nodeIpDo { return n.nodeIpDo.WithContext(ctx) }

func (n nodeIp) TableName() string { return n.nodeIpDo.TableName() }

func (n nodeIp) Alias() string { return n.nodeIpDo.Alias() }

func (n *nodeIp) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := n.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (n *nodeIp) fillFieldMap() {
	n.fieldMap = make(map[string]field.Expr, 7)
	n.fieldMap["id"] = n.Id
	n.fieldMap["ip"] = n.Ip
	n.fieldMap["node_id"] = n.NodeId
	n.fieldMap["type"] = n.Type
	n.fieldMap["is_master"] = n.IsMaster
	n.fieldMap["created_at"] = n.CreatedAt
	n.fieldMap["updated_at"] = n.UpdatedAt
}

func (n nodeIp) clone(db *gorm.DB) nodeIp {
	n.nodeIpDo.ReplaceDB(db)
	return n
}

type nodeIpDo struct{ gen.DO }

func (n nodeIpDo) Debug() *nodeIpDo {
	return n.withDO(n.DO.Debug())
}

func (n nodeIpDo) WithContext(ctx context.Context) *nodeIpDo {
	return n.withDO(n.DO.WithContext(ctx))
}

func (n nodeIpDo) Clauses(conds ...clause.Expression) *nodeIpDo {
	return n.withDO(n.DO.Clauses(conds...))
}

func (n nodeIpDo) Returning(value interface{}, columns ...string) *nodeIpDo {
	return n.withDO(n.DO.Returning(value, columns...))
}

func (n nodeIpDo) Not(conds ...gen.Condition) *nodeIpDo {
	return n.withDO(n.DO.Not(conds...))
}

func (n nodeIpDo) Or(conds ...gen.Condition) *nodeIpDo {
	return n.withDO(n.DO.Or(conds...))
}

func (n nodeIpDo) Select(conds ...field.Expr) *nodeIpDo {
	return n.withDO(n.DO.Select(conds...))
}

func (n nodeIpDo) Where(conds ...gen.Condition) *nodeIpDo {
	return n.withDO(n.DO.Where(conds...))
}

func (n nodeIpDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *nodeIpDo {
	return n.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (n nodeIpDo) Order(conds ...field.Expr) *nodeIpDo {
	return n.withDO(n.DO.Order(conds...))
}

func (n nodeIpDo) Distinct(cols ...field.Expr) *nodeIpDo {
	return n.withDO(n.DO.Distinct(cols...))
}

func (n nodeIpDo) Omit(cols ...field.Expr) *nodeIpDo {
	return n.withDO(n.DO.Omit(cols...))
}

func (n nodeIpDo) Join(table schema.Tabler, on ...field.Expr) *nodeIpDo {
	return n.withDO(n.DO.Join(table, on...))
}

func (n nodeIpDo) LeftJoin(table schema.Tabler, on ...field.Expr) *nodeIpDo {
	return n.withDO(n.DO.LeftJoin(table, on...))
}

func (n nodeIpDo) RightJoin(table schema.Tabler, on ...field.Expr) *nodeIpDo {
	return n.withDO(n.DO.RightJoin(table, on...))
}

func (n nodeIpDo) Group(cols ...field.Expr) *nodeIpDo {
	return n.withDO(n.DO.Group(cols...))
}

func (n nodeIpDo) Having(conds ...gen.Condition) *nodeIpDo {
	return n.withDO(n.DO.Having(conds...))
}

func (n nodeIpDo) Limit(limit int) *nodeIpDo {
	return n.withDO(n.DO.Limit(limit))
}

func (n nodeIpDo) Offset(offset int) *nodeIpDo {
	return n.withDO(n.DO.Offset(offset))
}

func (n nodeIpDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *nodeIpDo {
	return n.withDO(n.DO.Scopes(funcs...))
}

func (n nodeIpDo) Unscoped() *nodeIpDo {
	return n.withDO(n.DO.Unscoped())
}

func (n nodeIpDo) Create(values ...*model.NodeIp) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Create(values)
}

func (n nodeIpDo) CreateInBatches(values []*model.NodeIp, batchSize int) error {
	return n.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (n nodeIpDo) Save(values ...*model.NodeIp) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Save(values)
}

func (n nodeIpDo) First() (*model.NodeIp, error) {
	if result, err := n.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.NodeIp), nil
	}
}

func (n nodeIpDo) Take() (*model.NodeIp, error) {
	if result, err := n.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.NodeIp), nil
	}
}

func (n nodeIpDo) Last() (*model.NodeIp, error) {
	if result, err := n.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.NodeIp), nil
	}
}

func (n nodeIpDo) Find() ([]*model.NodeIp, error) {
	result, err := n.DO.Find()
	return result.([]*model.NodeIp), err
}

func (n nodeIpDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NodeIp, err error) {
	buf := make([]*model.NodeIp, 0, batchSize)
	err = n.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (n nodeIpDo) FindInBatches(result *[]*model.NodeIp, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return n.DO.FindInBatches(result, batchSize, fc)
}

func (n nodeIpDo) Attrs(attrs ...field.AssignExpr) *nodeIpDo {
	return n.withDO(n.DO.Attrs(attrs...))
}

func (n nodeIpDo) Assign(attrs ...field.AssignExpr) *nodeIpDo {
	return n.withDO(n.DO.Assign(attrs...))
}

func (n nodeIpDo) Joins(fields ...field.RelationField) *nodeIpDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Joins(_f))
	}
	return &n
}

func (n nodeIpDo) Preload(fields ...field.RelationField) *nodeIpDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Preload(_f))
	}
	return &n
}

func (n nodeIpDo) FirstOrInit() (*model.NodeIp, error) {
	if result, err := n.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.NodeIp), nil
	}
}

func (n nodeIpDo) FirstOrCreate() (*model.NodeIp, error) {
	if result, err := n.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.NodeIp), nil
	}
}

func (n nodeIpDo) FindByPage(offset int, limit int) (result []*model.NodeIp, count int64, err error) {
	result, err = n.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = n.Offset(-1).Limit(-1).Count()
	return
}

func (n nodeIpDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = n.Count()
	if err != nil {
		return
	}

	err = n.Offset(offset).Limit(limit).Scan(result)
	return
}

func (n *nodeIpDo) withDO(do gen.Dao) *nodeIpDo {
	n.DO = *do.(*gen.DO)
	return n
}
