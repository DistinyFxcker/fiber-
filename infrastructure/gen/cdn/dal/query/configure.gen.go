// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"cdnFiber/infrastructure/gen/cdn/dal/model"
)

func newConfigure(db *gorm.DB) configure {
	_configure := configure{}

	_configure.configureDo.UseDB(db)
	_configure.configureDo.UseModel(&model.Configure{})

	tableName := _configure.configureDo.TableName()
	_configure.ALL = field.NewField(tableName, "*")
	_configure.Id = field.NewString(tableName, "id")
	_configure.RelationId = field.NewString(tableName, "relation_id")
	_configure.RelationType = field.NewInt(tableName, "relation_type")
	_configure.ConnectTime = field.NewInt(tableName, "connect_time")
	_configure.MinConnNum = field.NewInt(tableName, "min_conn_num")
	_configure.MaxMemoryCache = field.NewInt(tableName, "max_memory_cache")
	_configure.MaxDiskCache = field.NewInt(tableName, "max_disk_cache")
	_configure.InteMaxDiskCache = field.NewInt(tableName, "inte_max_disk_cache")
	_configure.DiskCacheType = field.NewInt(tableName, "disk_cache_type")
	_configure.CompressionGrade = field.NewInt(tableName, "compression_grade")
	_configure.CompressionType = field.NewString(tableName, "compression_type")
	_configure.CompressionSizeUpper = field.NewInt(tableName, "compression_size_upper")
	_configure.CompressionSizeLower = field.NewInt(tableName, "compression_size_lower")
	_configure.CompressionUpperType = field.NewInt(tableName, "compression_upper_type")
	_configure.CompressionLowerType = field.NewInt(tableName, "compression_lower_type")
	_configure.FrequencyLimit = field.NewInt(tableName, "frequency_limit")
	_configure.MinuteSetting = field.NewInt(tableName, "minute_setting")
	_configure.MinuteTotalTime = field.NewInt(tableName, "minute_total_time")
	_configure.ConnectNum = field.NewInt(tableName, "connect_num")
	_configure.LocationInfo = field.NewString(tableName, "location_info")
	_configure.ReleaseTime = field.NewInt(tableName, "release_time")
	_configure.Remark = field.NewString(tableName, "remark")
	_configure.CreatedAt = field.NewInt64(tableName, "created_at")
	_configure.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_configure.fillFieldMap()

	return _configure
}

type configure struct {
	configureDo configureDo

	ALL                  field.Field
	Id                   field.String
	RelationId           field.String
	RelationType         field.Int
	ConnectTime          field.Int
	MinConnNum           field.Int
	MaxMemoryCache       field.Int
	MaxDiskCache         field.Int
	InteMaxDiskCache     field.Int
	DiskCacheType        field.Int
	CompressionGrade     field.Int
	CompressionType      field.String
	CompressionSizeUpper field.Int
	CompressionSizeLower field.Int
	CompressionUpperType field.Int
	CompressionLowerType field.Int
	FrequencyLimit       field.Int
	MinuteSetting        field.Int
	MinuteTotalTime      field.Int
	ConnectNum           field.Int
	LocationInfo         field.String
	ReleaseTime          field.Int
	Remark               field.String
	CreatedAt            field.Int64
	UpdatedAt            field.Int64

	fieldMap map[string]field.Expr
}

func (c configure) Table(newTableName string) *configure {
	c.configureDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c configure) As(alias string) *configure {
	c.configureDo.DO = *(c.configureDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *configure) updateTableName(table string) *configure {
	c.ALL = field.NewField(table, "*")
	c.Id = field.NewString(table, "id")
	c.RelationId = field.NewString(table, "relation_id")
	c.RelationType = field.NewInt(table, "relation_type")
	c.ConnectTime = field.NewInt(table, "connect_time")
	c.MinConnNum = field.NewInt(table, "min_conn_num")
	c.MaxMemoryCache = field.NewInt(table, "max_memory_cache")
	c.MaxDiskCache = field.NewInt(table, "max_disk_cache")
	c.InteMaxDiskCache = field.NewInt(table, "inte_max_disk_cache")
	c.DiskCacheType = field.NewInt(table, "disk_cache_type")
	c.CompressionGrade = field.NewInt(table, "compression_grade")
	c.CompressionType = field.NewString(table, "compression_type")
	c.CompressionSizeUpper = field.NewInt(table, "compression_size_upper")
	c.CompressionSizeLower = field.NewInt(table, "compression_size_lower")
	c.CompressionUpperType = field.NewInt(table, "compression_upper_type")
	c.CompressionLowerType = field.NewInt(table, "compression_lower_type")
	c.FrequencyLimit = field.NewInt(table, "frequency_limit")
	c.MinuteSetting = field.NewInt(table, "minute_setting")
	c.MinuteTotalTime = field.NewInt(table, "minute_total_time")
	c.ConnectNum = field.NewInt(table, "connect_num")
	c.LocationInfo = field.NewString(table, "location_info")
	c.ReleaseTime = field.NewInt(table, "release_time")
	c.Remark = field.NewString(table, "remark")
	c.CreatedAt = field.NewInt64(table, "created_at")
	c.UpdatedAt = field.NewInt64(table, "updated_at")

	c.fillFieldMap()

	return c
}

func (c *configure) WithContext(ctx context.Context) *configureDo {
	return c.configureDo.WithContext(ctx)
}

func (c configure) TableName() string { return c.configureDo.TableName() }

func (c configure) Alias() string { return c.configureDo.Alias() }

func (c *configure) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *configure) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 24)
	c.fieldMap["id"] = c.Id
	c.fieldMap["relation_id"] = c.RelationId
	c.fieldMap["relation_type"] = c.RelationType
	c.fieldMap["connect_time"] = c.ConnectTime
	c.fieldMap["min_conn_num"] = c.MinConnNum
	c.fieldMap["max_memory_cache"] = c.MaxMemoryCache
	c.fieldMap["max_disk_cache"] = c.MaxDiskCache
	c.fieldMap["inte_max_disk_cache"] = c.InteMaxDiskCache
	c.fieldMap["disk_cache_type"] = c.DiskCacheType
	c.fieldMap["compression_grade"] = c.CompressionGrade
	c.fieldMap["compression_type"] = c.CompressionType
	c.fieldMap["compression_size_upper"] = c.CompressionSizeUpper
	c.fieldMap["compression_size_lower"] = c.CompressionSizeLower
	c.fieldMap["compression_upper_type"] = c.CompressionUpperType
	c.fieldMap["compression_lower_type"] = c.CompressionLowerType
	c.fieldMap["frequency_limit"] = c.FrequencyLimit
	c.fieldMap["minute_setting"] = c.MinuteSetting
	c.fieldMap["minute_total_time"] = c.MinuteTotalTime
	c.fieldMap["connect_num"] = c.ConnectNum
	c.fieldMap["location_info"] = c.LocationInfo
	c.fieldMap["release_time"] = c.ReleaseTime
	c.fieldMap["remark"] = c.Remark
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
}

func (c configure) clone(db *gorm.DB) configure {
	c.configureDo.ReplaceDB(db)
	return c
}

type configureDo struct{ gen.DO }

func (c configureDo) Debug() *configureDo {
	return c.withDO(c.DO.Debug())
}

func (c configureDo) WithContext(ctx context.Context) *configureDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c configureDo) Clauses(conds ...clause.Expression) *configureDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c configureDo) Returning(value interface{}, columns ...string) *configureDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c configureDo) Not(conds ...gen.Condition) *configureDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c configureDo) Or(conds ...gen.Condition) *configureDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c configureDo) Select(conds ...field.Expr) *configureDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c configureDo) Where(conds ...gen.Condition) *configureDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c configureDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *configureDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c configureDo) Order(conds ...field.Expr) *configureDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c configureDo) Distinct(cols ...field.Expr) *configureDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c configureDo) Omit(cols ...field.Expr) *configureDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c configureDo) Join(table schema.Tabler, on ...field.Expr) *configureDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c configureDo) LeftJoin(table schema.Tabler, on ...field.Expr) *configureDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c configureDo) RightJoin(table schema.Tabler, on ...field.Expr) *configureDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c configureDo) Group(cols ...field.Expr) *configureDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c configureDo) Having(conds ...gen.Condition) *configureDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c configureDo) Limit(limit int) *configureDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c configureDo) Offset(offset int) *configureDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c configureDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *configureDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c configureDo) Unscoped() *configureDo {
	return c.withDO(c.DO.Unscoped())
}

func (c configureDo) Create(values ...*model.Configure) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c configureDo) CreateInBatches(values []*model.Configure, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c configureDo) Save(values ...*model.Configure) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c configureDo) First() (*model.Configure, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Configure), nil
	}
}

func (c configureDo) Take() (*model.Configure, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Configure), nil
	}
}

func (c configureDo) Last() (*model.Configure, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Configure), nil
	}
}

func (c configureDo) Find() ([]*model.Configure, error) {
	result, err := c.DO.Find()
	return result.([]*model.Configure), err
}

func (c configureDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Configure, err error) {
	buf := make([]*model.Configure, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c configureDo) FindInBatches(result *[]*model.Configure, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c configureDo) Attrs(attrs ...field.AssignExpr) *configureDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c configureDo) Assign(attrs ...field.AssignExpr) *configureDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c configureDo) Joins(fields ...field.RelationField) *configureDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c configureDo) Preload(fields ...field.RelationField) *configureDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c configureDo) FirstOrInit() (*model.Configure, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Configure), nil
	}
}

func (c configureDo) FirstOrCreate() (*model.Configure, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Configure), nil
	}
}

func (c configureDo) FindByPage(offset int, limit int) (result []*model.Configure, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c configureDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c *configureDo) withDO(do gen.Dao) *configureDo {
	c.DO = *do.(*gen.DO)
	return c
}
