// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"cdnFiber/infrastructure/gen/cdn/dal/model"
)

func newNodeConfig(db *gorm.DB) nodeConfig {
	_nodeConfig := nodeConfig{}

	_nodeConfig.nodeConfigDo.UseDB(db)
	_nodeConfig.nodeConfigDo.UseModel(&model.NodeConfig{})

	tableName := _nodeConfig.nodeConfigDo.TableName()
	_nodeConfig.ALL = field.NewField(tableName, "*")
	_nodeConfig.Id = field.NewString(tableName, "id")
	_nodeConfig.TemplateName = field.NewString(tableName, "template_name")
	_nodeConfig.MemCacheProportion = field.NewInt(tableName, "mem_cache_proportion")
	_nodeConfig.CacheType = field.NewInt(tableName, "cache_type")
	_nodeConfig.Path = field.NewString(tableName, "path")
	_nodeConfig.PartitionPath = field.NewString(tableName, "partition_path")
	_nodeConfig.DiskCacheProportion = field.NewInt(tableName, "disk_cache_proportion")
	_nodeConfig.CreatedAt = field.NewInt64(tableName, "created_at")
	_nodeConfig.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_nodeConfig.fillFieldMap()

	return _nodeConfig
}

type nodeConfig struct {
	nodeConfigDo nodeConfigDo

	ALL                 field.Field
	Id                  field.String
	TemplateName        field.String
	MemCacheProportion  field.Int
	CacheType           field.Int
	Path                field.String
	PartitionPath       field.String
	DiskCacheProportion field.Int
	CreatedAt           field.Int64
	UpdatedAt           field.Int64

	fieldMap map[string]field.Expr
}

func (n nodeConfig) Table(newTableName string) *nodeConfig {
	n.nodeConfigDo.UseTable(newTableName)
	return n.updateTableName(newTableName)
}

func (n nodeConfig) As(alias string) *nodeConfig {
	n.nodeConfigDo.DO = *(n.nodeConfigDo.As(alias).(*gen.DO))
	return n.updateTableName(alias)
}

func (n *nodeConfig) updateTableName(table string) *nodeConfig {
	n.ALL = field.NewField(table, "*")
	n.Id = field.NewString(table, "id")
	n.TemplateName = field.NewString(table, "template_name")
	n.MemCacheProportion = field.NewInt(table, "mem_cache_proportion")
	n.CacheType = field.NewInt(table, "cache_type")
	n.Path = field.NewString(table, "path")
	n.PartitionPath = field.NewString(table, "partition_path")
	n.DiskCacheProportion = field.NewInt(table, "disk_cache_proportion")
	n.CreatedAt = field.NewInt64(table, "created_at")
	n.UpdatedAt = field.NewInt64(table, "updated_at")

	n.fillFieldMap()

	return n
}

func (n *nodeConfig) WithContext(ctx context.Context) *nodeConfigDo {
	return n.nodeConfigDo.WithContext(ctx)
}

func (n nodeConfig) TableName() string { return n.nodeConfigDo.TableName() }

func (n nodeConfig) Alias() string { return n.nodeConfigDo.Alias() }

func (n *nodeConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := n.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (n *nodeConfig) fillFieldMap() {
	n.fieldMap = make(map[string]field.Expr, 9)
	n.fieldMap["id"] = n.Id
	n.fieldMap["template_name"] = n.TemplateName
	n.fieldMap["mem_cache_proportion"] = n.MemCacheProportion
	n.fieldMap["cache_type"] = n.CacheType
	n.fieldMap["path"] = n.Path
	n.fieldMap["partition_path"] = n.PartitionPath
	n.fieldMap["disk_cache_proportion"] = n.DiskCacheProportion
	n.fieldMap["created_at"] = n.CreatedAt
	n.fieldMap["updated_at"] = n.UpdatedAt
}

func (n nodeConfig) clone(db *gorm.DB) nodeConfig {
	n.nodeConfigDo.ReplaceDB(db)
	return n
}

type nodeConfigDo struct{ gen.DO }

func (n nodeConfigDo) Debug() *nodeConfigDo {
	return n.withDO(n.DO.Debug())
}

func (n nodeConfigDo) WithContext(ctx context.Context) *nodeConfigDo {
	return n.withDO(n.DO.WithContext(ctx))
}

func (n nodeConfigDo) Clauses(conds ...clause.Expression) *nodeConfigDo {
	return n.withDO(n.DO.Clauses(conds...))
}

func (n nodeConfigDo) Returning(value interface{}, columns ...string) *nodeConfigDo {
	return n.withDO(n.DO.Returning(value, columns...))
}

func (n nodeConfigDo) Not(conds ...gen.Condition) *nodeConfigDo {
	return n.withDO(n.DO.Not(conds...))
}

func (n nodeConfigDo) Or(conds ...gen.Condition) *nodeConfigDo {
	return n.withDO(n.DO.Or(conds...))
}

func (n nodeConfigDo) Select(conds ...field.Expr) *nodeConfigDo {
	return n.withDO(n.DO.Select(conds...))
}

func (n nodeConfigDo) Where(conds ...gen.Condition) *nodeConfigDo {
	return n.withDO(n.DO.Where(conds...))
}

func (n nodeConfigDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *nodeConfigDo {
	return n.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (n nodeConfigDo) Order(conds ...field.Expr) *nodeConfigDo {
	return n.withDO(n.DO.Order(conds...))
}

func (n nodeConfigDo) Distinct(cols ...field.Expr) *nodeConfigDo {
	return n.withDO(n.DO.Distinct(cols...))
}

func (n nodeConfigDo) Omit(cols ...field.Expr) *nodeConfigDo {
	return n.withDO(n.DO.Omit(cols...))
}

func (n nodeConfigDo) Join(table schema.Tabler, on ...field.Expr) *nodeConfigDo {
	return n.withDO(n.DO.Join(table, on...))
}

func (n nodeConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) *nodeConfigDo {
	return n.withDO(n.DO.LeftJoin(table, on...))
}

func (n nodeConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) *nodeConfigDo {
	return n.withDO(n.DO.RightJoin(table, on...))
}

func (n nodeConfigDo) Group(cols ...field.Expr) *nodeConfigDo {
	return n.withDO(n.DO.Group(cols...))
}

func (n nodeConfigDo) Having(conds ...gen.Condition) *nodeConfigDo {
	return n.withDO(n.DO.Having(conds...))
}

func (n nodeConfigDo) Limit(limit int) *nodeConfigDo {
	return n.withDO(n.DO.Limit(limit))
}

func (n nodeConfigDo) Offset(offset int) *nodeConfigDo {
	return n.withDO(n.DO.Offset(offset))
}

func (n nodeConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *nodeConfigDo {
	return n.withDO(n.DO.Scopes(funcs...))
}

func (n nodeConfigDo) Unscoped() *nodeConfigDo {
	return n.withDO(n.DO.Unscoped())
}

func (n nodeConfigDo) Create(values ...*model.NodeConfig) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Create(values)
}

func (n nodeConfigDo) CreateInBatches(values []*model.NodeConfig, batchSize int) error {
	return n.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (n nodeConfigDo) Save(values ...*model.NodeConfig) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Save(values)
}

func (n nodeConfigDo) First() (*model.NodeConfig, error) {
	if result, err := n.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.NodeConfig), nil
	}
}

func (n nodeConfigDo) Take() (*model.NodeConfig, error) {
	if result, err := n.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.NodeConfig), nil
	}
}

func (n nodeConfigDo) Last() (*model.NodeConfig, error) {
	if result, err := n.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.NodeConfig), nil
	}
}

func (n nodeConfigDo) Find() ([]*model.NodeConfig, error) {
	result, err := n.DO.Find()
	return result.([]*model.NodeConfig), err
}

func (n nodeConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NodeConfig, err error) {
	buf := make([]*model.NodeConfig, 0, batchSize)
	err = n.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (n nodeConfigDo) FindInBatches(result *[]*model.NodeConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return n.DO.FindInBatches(result, batchSize, fc)
}

func (n nodeConfigDo) Attrs(attrs ...field.AssignExpr) *nodeConfigDo {
	return n.withDO(n.DO.Attrs(attrs...))
}

func (n nodeConfigDo) Assign(attrs ...field.AssignExpr) *nodeConfigDo {
	return n.withDO(n.DO.Assign(attrs...))
}

func (n nodeConfigDo) Joins(fields ...field.RelationField) *nodeConfigDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Joins(_f))
	}
	return &n
}

func (n nodeConfigDo) Preload(fields ...field.RelationField) *nodeConfigDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Preload(_f))
	}
	return &n
}

func (n nodeConfigDo) FirstOrInit() (*model.NodeConfig, error) {
	if result, err := n.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.NodeConfig), nil
	}
}

func (n nodeConfigDo) FirstOrCreate() (*model.NodeConfig, error) {
	if result, err := n.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.NodeConfig), nil
	}
}

func (n nodeConfigDo) FindByPage(offset int, limit int) (result []*model.NodeConfig, count int64, err error) {
	result, err = n.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = n.Offset(-1).Limit(-1).Count()
	return
}

func (n nodeConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = n.Count()
	if err != nil {
		return
	}

	err = n.Offset(offset).Limit(limit).Scan(result)
	return
}

func (n *nodeConfigDo) withDO(do gen.Dao) *nodeConfigDo {
	n.DO = *do.(*gen.DO)
	return n
}
