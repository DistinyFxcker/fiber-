// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"go_web_example/gen/dal/model"
)

func newRegion(db *gorm.DB) region {
	_region := region{}

	_region.regionDo.UseDB(db)
	_region.regionDo.UseModel(&model.Region{})

	tableName := _region.regionDo.TableName()
	_region.ALL = field.NewField(tableName, "*")
	_region.Id = field.NewString(tableName, "id")
	_region.Name = field.NewString(tableName, "name")
	_region.MasterDomain = field.NewString(tableName, "master_domain")
	_region.Cname = field.NewString(tableName, "c_name")
	_region.ConnectTime = field.NewInt(tableName, "connect_time")
	_region.CreatedAt = field.NewInt64(tableName, "created_at")
	_region.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_region.fillFieldMap()

	return _region
}

type region struct {
	regionDo regionDo

	ALL          field.Field
	Id           field.String
	Name         field.String
	MasterDomain field.String
	Cname        field.String
	ConnectTime  field.Int
	CreatedAt    field.Int64
	UpdatedAt    field.Int64

	fieldMap map[string]field.Expr
}

func (r region) Table(newTableName string) *region {
	r.regionDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r region) As(alias string) *region {
	r.regionDo.DO = *(r.regionDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *region) updateTableName(table string) *region {
	r.ALL = field.NewField(table, "*")
	r.Id = field.NewString(table, "id")
	r.Name = field.NewString(table, "name")
	r.MasterDomain = field.NewString(table, "master_domain")
	r.Cname = field.NewString(table, "c_name")
	r.ConnectTime = field.NewInt(table, "connect_time")
	r.CreatedAt = field.NewInt64(table, "created_at")
	r.UpdatedAt = field.NewInt64(table, "updated_at")

	r.fillFieldMap()

	return r
}

func (r *region) WithContext(ctx context.Context) *regionDo { return r.regionDo.WithContext(ctx) }

func (r region) TableName() string { return r.regionDo.TableName() }

func (r region) Alias() string { return r.regionDo.Alias() }

func (r *region) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *region) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 7)
	r.fieldMap["id"] = r.Id
	r.fieldMap["name"] = r.Name
	r.fieldMap["master_domain"] = r.MasterDomain
	r.fieldMap["c_name"] = r.Cname
	r.fieldMap["connect_time"] = r.ConnectTime
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
}

func (r region) clone(db *gorm.DB) region {
	r.regionDo.ReplaceDB(db)
	return r
}

type regionDo struct{ gen.DO }

func (r regionDo) Debug() *regionDo {
	return r.withDO(r.DO.Debug())
}

func (r regionDo) WithContext(ctx context.Context) *regionDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r regionDo) Clauses(conds ...clause.Expression) *regionDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r regionDo) Returning(value interface{}, columns ...string) *regionDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r regionDo) Not(conds ...gen.Condition) *regionDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r regionDo) Or(conds ...gen.Condition) *regionDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r regionDo) Select(conds ...field.Expr) *regionDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r regionDo) Where(conds ...gen.Condition) *regionDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r regionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *regionDo {
	return r.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (r regionDo) Order(conds ...field.Expr) *regionDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r regionDo) Distinct(cols ...field.Expr) *regionDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r regionDo) Omit(cols ...field.Expr) *regionDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r regionDo) Join(table schema.Tabler, on ...field.Expr) *regionDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r regionDo) LeftJoin(table schema.Tabler, on ...field.Expr) *regionDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r regionDo) RightJoin(table schema.Tabler, on ...field.Expr) *regionDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r regionDo) Group(cols ...field.Expr) *regionDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r regionDo) Having(conds ...gen.Condition) *regionDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r regionDo) Limit(limit int) *regionDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r regionDo) Offset(offset int) *regionDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r regionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *regionDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r regionDo) Unscoped() *regionDo {
	return r.withDO(r.DO.Unscoped())
}

func (r regionDo) Create(values ...*model.Region) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r regionDo) CreateInBatches(values []*model.Region, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r regionDo) Save(values ...*model.Region) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r regionDo) First() (*model.Region, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Region), nil
	}
}

func (r regionDo) Take() (*model.Region, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Region), nil
	}
}

func (r regionDo) Last() (*model.Region, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Region), nil
	}
}

func (r regionDo) Find() ([]*model.Region, error) {
	result, err := r.DO.Find()
	return result.([]*model.Region), err
}

func (r regionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Region, err error) {
	buf := make([]*model.Region, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r regionDo) FindInBatches(result *[]*model.Region, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r regionDo) Attrs(attrs ...field.AssignExpr) *regionDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r regionDo) Assign(attrs ...field.AssignExpr) *regionDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r regionDo) Joins(fields ...field.RelationField) *regionDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r regionDo) Preload(fields ...field.RelationField) *regionDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r regionDo) FirstOrInit() (*model.Region, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Region), nil
	}
}

func (r regionDo) FirstOrCreate() (*model.Region, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Region), nil
	}
}

func (r regionDo) FindByPage(offset int, limit int) (result []*model.Region, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r regionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r *regionDo) withDO(do gen.Dao) *regionDo {
	r.DO = *do.(*gen.DO)
	return r
}
