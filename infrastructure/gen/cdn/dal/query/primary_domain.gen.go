// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"cdnFiber/infrastructure/gen/cdn/dal/model"
)

func newPrimaryDomain(db *gorm.DB) primaryDomain {
	_primaryDomain := primaryDomain{}

	_primaryDomain.primaryDomainDo.UseDB(db)
	_primaryDomain.primaryDomainDo.UseModel(&model.PrimaryDomain{})

	tableName := _primaryDomain.primaryDomainDo.TableName()
	_primaryDomain.ALL = field.NewField(tableName, "*")
	_primaryDomain.Id = field.NewString(tableName, "id")
	_primaryDomain.Domain = field.NewString(tableName, "domain")
	_primaryDomain.CreatedAt = field.NewInt64(tableName, "created_at")
	_primaryDomain.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_primaryDomain.fillFieldMap()

	return _primaryDomain
}

type primaryDomain struct {
	primaryDomainDo primaryDomainDo

	ALL       field.Field
	Id        field.String
	Domain    field.String
	CreatedAt field.Int64
	UpdatedAt field.Int64

	fieldMap map[string]field.Expr
}

func (p primaryDomain) Table(newTableName string) *primaryDomain {
	p.primaryDomainDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p primaryDomain) As(alias string) *primaryDomain {
	p.primaryDomainDo.DO = *(p.primaryDomainDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *primaryDomain) updateTableName(table string) *primaryDomain {
	p.ALL = field.NewField(table, "*")
	p.Id = field.NewString(table, "id")
	p.Domain = field.NewString(table, "domain")
	p.CreatedAt = field.NewInt64(table, "created_at")
	p.UpdatedAt = field.NewInt64(table, "updated_at")

	p.fillFieldMap()

	return p
}

func (p *primaryDomain) WithContext(ctx context.Context) *primaryDomainDo {
	return p.primaryDomainDo.WithContext(ctx)
}

func (p primaryDomain) TableName() string { return p.primaryDomainDo.TableName() }

func (p primaryDomain) Alias() string { return p.primaryDomainDo.Alias() }

func (p *primaryDomain) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *primaryDomain) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 4)
	p.fieldMap["id"] = p.Id
	p.fieldMap["domain"] = p.Domain
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
}

func (p primaryDomain) clone(db *gorm.DB) primaryDomain {
	p.primaryDomainDo.ReplaceDB(db)
	return p
}

type primaryDomainDo struct{ gen.DO }

func (p primaryDomainDo) Debug() *primaryDomainDo {
	return p.withDO(p.DO.Debug())
}

func (p primaryDomainDo) WithContext(ctx context.Context) *primaryDomainDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p primaryDomainDo) Clauses(conds ...clause.Expression) *primaryDomainDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p primaryDomainDo) Returning(value interface{}, columns ...string) *primaryDomainDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p primaryDomainDo) Not(conds ...gen.Condition) *primaryDomainDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p primaryDomainDo) Or(conds ...gen.Condition) *primaryDomainDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p primaryDomainDo) Select(conds ...field.Expr) *primaryDomainDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p primaryDomainDo) Where(conds ...gen.Condition) *primaryDomainDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p primaryDomainDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *primaryDomainDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p primaryDomainDo) Order(conds ...field.Expr) *primaryDomainDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p primaryDomainDo) Distinct(cols ...field.Expr) *primaryDomainDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p primaryDomainDo) Omit(cols ...field.Expr) *primaryDomainDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p primaryDomainDo) Join(table schema.Tabler, on ...field.Expr) *primaryDomainDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p primaryDomainDo) LeftJoin(table schema.Tabler, on ...field.Expr) *primaryDomainDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p primaryDomainDo) RightJoin(table schema.Tabler, on ...field.Expr) *primaryDomainDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p primaryDomainDo) Group(cols ...field.Expr) *primaryDomainDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p primaryDomainDo) Having(conds ...gen.Condition) *primaryDomainDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p primaryDomainDo) Limit(limit int) *primaryDomainDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p primaryDomainDo) Offset(offset int) *primaryDomainDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p primaryDomainDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *primaryDomainDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p primaryDomainDo) Unscoped() *primaryDomainDo {
	return p.withDO(p.DO.Unscoped())
}

func (p primaryDomainDo) Create(values ...*model.PrimaryDomain) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p primaryDomainDo) CreateInBatches(values []*model.PrimaryDomain, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p primaryDomainDo) Save(values ...*model.PrimaryDomain) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p primaryDomainDo) First() (*model.PrimaryDomain, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PrimaryDomain), nil
	}
}

func (p primaryDomainDo) Take() (*model.PrimaryDomain, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PrimaryDomain), nil
	}
}

func (p primaryDomainDo) Last() (*model.PrimaryDomain, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PrimaryDomain), nil
	}
}

func (p primaryDomainDo) Find() ([]*model.PrimaryDomain, error) {
	result, err := p.DO.Find()
	return result.([]*model.PrimaryDomain), err
}

func (p primaryDomainDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PrimaryDomain, err error) {
	buf := make([]*model.PrimaryDomain, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p primaryDomainDo) FindInBatches(result *[]*model.PrimaryDomain, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p primaryDomainDo) Attrs(attrs ...field.AssignExpr) *primaryDomainDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p primaryDomainDo) Assign(attrs ...field.AssignExpr) *primaryDomainDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p primaryDomainDo) Joins(fields ...field.RelationField) *primaryDomainDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p primaryDomainDo) Preload(fields ...field.RelationField) *primaryDomainDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p primaryDomainDo) FirstOrInit() (*model.PrimaryDomain, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PrimaryDomain), nil
	}
}

func (p primaryDomainDo) FirstOrCreate() (*model.PrimaryDomain, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PrimaryDomain), nil
	}
}

func (p primaryDomainDo) FindByPage(offset int, limit int) (result []*model.PrimaryDomain, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p primaryDomainDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p *primaryDomainDo) withDO(do gen.Dao) *primaryDomainDo {
	p.DO = *do.(*gen.DO)
	return p
}
