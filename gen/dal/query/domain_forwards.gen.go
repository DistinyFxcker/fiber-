// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"go_web_example/gen/dal/model"
)

func newDomainForward(db *gorm.DB) domainForward {
	_domainForward := domainForward{}

	_domainForward.domainForwardDo.UseDB(db)
	_domainForward.domainForwardDo.UseModel(&model.DomainForward{})

	tableName := _domainForward.domainForwardDo.TableName()
	_domainForward.ALL = field.NewField(tableName, "*")
	_domainForward.Id = field.NewString(tableName, "id")
	_domainForward.DomainId = field.NewString(tableName, "domain_id")
	_domainForward.Address = field.NewString(tableName, "address")
	_domainForward.TargetAddress = field.NewString(tableName, "target_address")
	_domainForward.CreatedAt = field.NewInt64(tableName, "created_at")
	_domainForward.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_domainForward.fillFieldMap()

	return _domainForward
}

type domainForward struct {
	domainForwardDo domainForwardDo

	ALL           field.Field
	Id            field.String
	DomainId      field.String
	Address       field.String
	TargetAddress field.String
	CreatedAt     field.Int64
	UpdatedAt     field.Int64

	fieldMap map[string]field.Expr
}

func (d domainForward) Table(newTableName string) *domainForward {
	d.domainForwardDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d domainForward) As(alias string) *domainForward {
	d.domainForwardDo.DO = *(d.domainForwardDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *domainForward) updateTableName(table string) *domainForward {
	d.ALL = field.NewField(table, "*")
	d.Id = field.NewString(table, "id")
	d.DomainId = field.NewString(table, "domain_id")
	d.Address = field.NewString(table, "address")
	d.TargetAddress = field.NewString(table, "target_address")
	d.CreatedAt = field.NewInt64(table, "created_at")
	d.UpdatedAt = field.NewInt64(table, "updated_at")

	d.fillFieldMap()

	return d
}

func (d *domainForward) WithContext(ctx context.Context) *domainForwardDo {
	return d.domainForwardDo.WithContext(ctx)
}

func (d domainForward) TableName() string { return d.domainForwardDo.TableName() }

func (d domainForward) Alias() string { return d.domainForwardDo.Alias() }

func (d *domainForward) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *domainForward) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 6)
	d.fieldMap["id"] = d.Id
	d.fieldMap["domain_id"] = d.DomainId
	d.fieldMap["address"] = d.Address
	d.fieldMap["target_address"] = d.TargetAddress
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
}

func (d domainForward) clone(db *gorm.DB) domainForward {
	d.domainForwardDo.ReplaceDB(db)
	return d
}

type domainForwardDo struct{ gen.DO }

func (d domainForwardDo) Debug() *domainForwardDo {
	return d.withDO(d.DO.Debug())
}

func (d domainForwardDo) WithContext(ctx context.Context) *domainForwardDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d domainForwardDo) Clauses(conds ...clause.Expression) *domainForwardDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d domainForwardDo) Returning(value interface{}, columns ...string) *domainForwardDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d domainForwardDo) Not(conds ...gen.Condition) *domainForwardDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d domainForwardDo) Or(conds ...gen.Condition) *domainForwardDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d domainForwardDo) Select(conds ...field.Expr) *domainForwardDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d domainForwardDo) Where(conds ...gen.Condition) *domainForwardDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d domainForwardDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *domainForwardDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d domainForwardDo) Order(conds ...field.Expr) *domainForwardDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d domainForwardDo) Distinct(cols ...field.Expr) *domainForwardDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d domainForwardDo) Omit(cols ...field.Expr) *domainForwardDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d domainForwardDo) Join(table schema.Tabler, on ...field.Expr) *domainForwardDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d domainForwardDo) LeftJoin(table schema.Tabler, on ...field.Expr) *domainForwardDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d domainForwardDo) RightJoin(table schema.Tabler, on ...field.Expr) *domainForwardDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d domainForwardDo) Group(cols ...field.Expr) *domainForwardDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d domainForwardDo) Having(conds ...gen.Condition) *domainForwardDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d domainForwardDo) Limit(limit int) *domainForwardDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d domainForwardDo) Offset(offset int) *domainForwardDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d domainForwardDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *domainForwardDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d domainForwardDo) Unscoped() *domainForwardDo {
	return d.withDO(d.DO.Unscoped())
}

func (d domainForwardDo) Create(values ...*model.DomainForward) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d domainForwardDo) CreateInBatches(values []*model.DomainForward, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d domainForwardDo) Save(values ...*model.DomainForward) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d domainForwardDo) First() (*model.DomainForward, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DomainForward), nil
	}
}

func (d domainForwardDo) Take() (*model.DomainForward, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DomainForward), nil
	}
}

func (d domainForwardDo) Last() (*model.DomainForward, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DomainForward), nil
	}
}

func (d domainForwardDo) Find() ([]*model.DomainForward, error) {
	result, err := d.DO.Find()
	return result.([]*model.DomainForward), err
}

func (d domainForwardDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DomainForward, err error) {
	buf := make([]*model.DomainForward, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d domainForwardDo) FindInBatches(result *[]*model.DomainForward, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d domainForwardDo) Attrs(attrs ...field.AssignExpr) *domainForwardDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d domainForwardDo) Assign(attrs ...field.AssignExpr) *domainForwardDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d domainForwardDo) Joins(fields ...field.RelationField) *domainForwardDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d domainForwardDo) Preload(fields ...field.RelationField) *domainForwardDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d domainForwardDo) FirstOrInit() (*model.DomainForward, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DomainForward), nil
	}
}

func (d domainForwardDo) FirstOrCreate() (*model.DomainForward, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DomainForward), nil
	}
}

func (d domainForwardDo) FindByPage(offset int, limit int) (result []*model.DomainForward, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d domainForwardDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d *domainForwardDo) withDO(do gen.Dao) *domainForwardDo {
	d.DO = *do.(*gen.DO)
	return d
}
