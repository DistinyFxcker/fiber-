// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"cdnFiber/infrastructure/gen/cdn/dal/model"
)

func newUserGroupRegion(db *gorm.DB) userGroupRegion {
	_userGroupRegion := userGroupRegion{}

	_userGroupRegion.userGroupRegionDo.UseDB(db)
	_userGroupRegion.userGroupRegionDo.UseModel(&model.UserGroupRegion{})

	tableName := _userGroupRegion.userGroupRegionDo.TableName()
	_userGroupRegion.ALL = field.NewField(tableName, "*")
	_userGroupRegion.Id = field.NewString(tableName, "id")
	_userGroupRegion.UserGroupId = field.NewString(tableName, "user_group_id")
	_userGroupRegion.RegionId = field.NewString(tableName, "region_id")
	_userGroupRegion.CreatedAt = field.NewInt64(tableName, "created_at")
	_userGroupRegion.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_userGroupRegion.fillFieldMap()

	return _userGroupRegion
}

type userGroupRegion struct {
	userGroupRegionDo userGroupRegionDo

	ALL         field.Field
	Id          field.String
	UserGroupId field.String
	RegionId    field.String
	CreatedAt   field.Int64
	UpdatedAt   field.Int64

	fieldMap map[string]field.Expr
}

func (u userGroupRegion) Table(newTableName string) *userGroupRegion {
	u.userGroupRegionDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userGroupRegion) As(alias string) *userGroupRegion {
	u.userGroupRegionDo.DO = *(u.userGroupRegionDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userGroupRegion) updateTableName(table string) *userGroupRegion {
	u.ALL = field.NewField(table, "*")
	u.Id = field.NewString(table, "id")
	u.UserGroupId = field.NewString(table, "user_group_id")
	u.RegionId = field.NewString(table, "region_id")
	u.CreatedAt = field.NewInt64(table, "created_at")
	u.UpdatedAt = field.NewInt64(table, "updated_at")

	u.fillFieldMap()

	return u
}

func (u *userGroupRegion) WithContext(ctx context.Context) *userGroupRegionDo {
	return u.userGroupRegionDo.WithContext(ctx)
}

func (u userGroupRegion) TableName() string { return u.userGroupRegionDo.TableName() }

func (u userGroupRegion) Alias() string { return u.userGroupRegionDo.Alias() }

func (u *userGroupRegion) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userGroupRegion) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 5)
	u.fieldMap["id"] = u.Id
	u.fieldMap["user_group_id"] = u.UserGroupId
	u.fieldMap["region_id"] = u.RegionId
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
}

func (u userGroupRegion) clone(db *gorm.DB) userGroupRegion {
	u.userGroupRegionDo.ReplaceDB(db)
	return u
}

type userGroupRegionDo struct{ gen.DO }

func (u userGroupRegionDo) Debug() *userGroupRegionDo {
	return u.withDO(u.DO.Debug())
}

func (u userGroupRegionDo) WithContext(ctx context.Context) *userGroupRegionDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userGroupRegionDo) Clauses(conds ...clause.Expression) *userGroupRegionDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userGroupRegionDo) Returning(value interface{}, columns ...string) *userGroupRegionDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userGroupRegionDo) Not(conds ...gen.Condition) *userGroupRegionDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userGroupRegionDo) Or(conds ...gen.Condition) *userGroupRegionDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userGroupRegionDo) Select(conds ...field.Expr) *userGroupRegionDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userGroupRegionDo) Where(conds ...gen.Condition) *userGroupRegionDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userGroupRegionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *userGroupRegionDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u userGroupRegionDo) Order(conds ...field.Expr) *userGroupRegionDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userGroupRegionDo) Distinct(cols ...field.Expr) *userGroupRegionDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userGroupRegionDo) Omit(cols ...field.Expr) *userGroupRegionDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userGroupRegionDo) Join(table schema.Tabler, on ...field.Expr) *userGroupRegionDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userGroupRegionDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userGroupRegionDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userGroupRegionDo) RightJoin(table schema.Tabler, on ...field.Expr) *userGroupRegionDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userGroupRegionDo) Group(cols ...field.Expr) *userGroupRegionDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userGroupRegionDo) Having(conds ...gen.Condition) *userGroupRegionDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userGroupRegionDo) Limit(limit int) *userGroupRegionDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userGroupRegionDo) Offset(offset int) *userGroupRegionDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userGroupRegionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userGroupRegionDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userGroupRegionDo) Unscoped() *userGroupRegionDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userGroupRegionDo) Create(values ...*model.UserGroupRegion) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userGroupRegionDo) CreateInBatches(values []*model.UserGroupRegion, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userGroupRegionDo) Save(values ...*model.UserGroupRegion) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userGroupRegionDo) First() (*model.UserGroupRegion, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserGroupRegion), nil
	}
}

func (u userGroupRegionDo) Take() (*model.UserGroupRegion, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserGroupRegion), nil
	}
}

func (u userGroupRegionDo) Last() (*model.UserGroupRegion, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserGroupRegion), nil
	}
}

func (u userGroupRegionDo) Find() ([]*model.UserGroupRegion, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserGroupRegion), err
}

func (u userGroupRegionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserGroupRegion, err error) {
	buf := make([]*model.UserGroupRegion, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userGroupRegionDo) FindInBatches(result *[]*model.UserGroupRegion, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userGroupRegionDo) Attrs(attrs ...field.AssignExpr) *userGroupRegionDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userGroupRegionDo) Assign(attrs ...field.AssignExpr) *userGroupRegionDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userGroupRegionDo) Joins(fields ...field.RelationField) *userGroupRegionDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userGroupRegionDo) Preload(fields ...field.RelationField) *userGroupRegionDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userGroupRegionDo) FirstOrInit() (*model.UserGroupRegion, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserGroupRegion), nil
	}
}

func (u userGroupRegionDo) FirstOrCreate() (*model.UserGroupRegion, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserGroupRegion), nil
	}
}

func (u userGroupRegionDo) FindByPage(offset int, limit int) (result []*model.UserGroupRegion, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userGroupRegionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u *userGroupRegionDo) withDO(do gen.Dao) *userGroupRegionDo {
	u.DO = *do.(*gen.DO)
	return u
}
