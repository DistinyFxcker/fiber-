// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"go_web_example/gen/dal/model"
)

func newServiceType(db *gorm.DB) serviceType {
	_serviceType := serviceType{}

	_serviceType.serviceTypeDo.UseDB(db)
	_serviceType.serviceTypeDo.UseModel(&model.ServiceType{})

	tableName := _serviceType.serviceTypeDo.TableName()
	_serviceType.ALL = field.NewField(tableName, "*")
	_serviceType.Id = field.NewString(tableName, "id")
	_serviceType.Name = field.NewString(tableName, "name")
	_serviceType.CreatedAt = field.NewInt64(tableName, "created_at")
	_serviceType.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_serviceType.fillFieldMap()

	return _serviceType
}

type serviceType struct {
	serviceTypeDo serviceTypeDo

	ALL       field.Field
	Id        field.String
	Name      field.String
	CreatedAt field.Int64
	UpdatedAt field.Int64

	fieldMap map[string]field.Expr
}

func (s serviceType) Table(newTableName string) *serviceType {
	s.serviceTypeDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s serviceType) As(alias string) *serviceType {
	s.serviceTypeDo.DO = *(s.serviceTypeDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *serviceType) updateTableName(table string) *serviceType {
	s.ALL = field.NewField(table, "*")
	s.Id = field.NewString(table, "id")
	s.Name = field.NewString(table, "name")
	s.CreatedAt = field.NewInt64(table, "created_at")
	s.UpdatedAt = field.NewInt64(table, "updated_at")

	s.fillFieldMap()

	return s
}

func (s *serviceType) WithContext(ctx context.Context) *serviceTypeDo {
	return s.serviceTypeDo.WithContext(ctx)
}

func (s serviceType) TableName() string { return s.serviceTypeDo.TableName() }

func (s serviceType) Alias() string { return s.serviceTypeDo.Alias() }

func (s *serviceType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *serviceType) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 4)
	s.fieldMap["id"] = s.Id
	s.fieldMap["name"] = s.Name
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
}

func (s serviceType) clone(db *gorm.DB) serviceType {
	s.serviceTypeDo.ReplaceDB(db)
	return s
}

type serviceTypeDo struct{ gen.DO }

func (s serviceTypeDo) Debug() *serviceTypeDo {
	return s.withDO(s.DO.Debug())
}

func (s serviceTypeDo) WithContext(ctx context.Context) *serviceTypeDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s serviceTypeDo) Clauses(conds ...clause.Expression) *serviceTypeDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s serviceTypeDo) Returning(value interface{}, columns ...string) *serviceTypeDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s serviceTypeDo) Not(conds ...gen.Condition) *serviceTypeDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s serviceTypeDo) Or(conds ...gen.Condition) *serviceTypeDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s serviceTypeDo) Select(conds ...field.Expr) *serviceTypeDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s serviceTypeDo) Where(conds ...gen.Condition) *serviceTypeDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s serviceTypeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *serviceTypeDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s serviceTypeDo) Order(conds ...field.Expr) *serviceTypeDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s serviceTypeDo) Distinct(cols ...field.Expr) *serviceTypeDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s serviceTypeDo) Omit(cols ...field.Expr) *serviceTypeDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s serviceTypeDo) Join(table schema.Tabler, on ...field.Expr) *serviceTypeDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s serviceTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) *serviceTypeDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s serviceTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) *serviceTypeDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s serviceTypeDo) Group(cols ...field.Expr) *serviceTypeDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s serviceTypeDo) Having(conds ...gen.Condition) *serviceTypeDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s serviceTypeDo) Limit(limit int) *serviceTypeDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s serviceTypeDo) Offset(offset int) *serviceTypeDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s serviceTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *serviceTypeDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s serviceTypeDo) Unscoped() *serviceTypeDo {
	return s.withDO(s.DO.Unscoped())
}

func (s serviceTypeDo) Create(values ...*model.ServiceType) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s serviceTypeDo) CreateInBatches(values []*model.ServiceType, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s serviceTypeDo) Save(values ...*model.ServiceType) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s serviceTypeDo) First() (*model.ServiceType, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServiceType), nil
	}
}

func (s serviceTypeDo) Take() (*model.ServiceType, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServiceType), nil
	}
}

func (s serviceTypeDo) Last() (*model.ServiceType, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServiceType), nil
	}
}

func (s serviceTypeDo) Find() ([]*model.ServiceType, error) {
	result, err := s.DO.Find()
	return result.([]*model.ServiceType), err
}

func (s serviceTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ServiceType, err error) {
	buf := make([]*model.ServiceType, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s serviceTypeDo) FindInBatches(result *[]*model.ServiceType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s serviceTypeDo) Attrs(attrs ...field.AssignExpr) *serviceTypeDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s serviceTypeDo) Assign(attrs ...field.AssignExpr) *serviceTypeDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s serviceTypeDo) Joins(fields ...field.RelationField) *serviceTypeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s serviceTypeDo) Preload(fields ...field.RelationField) *serviceTypeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s serviceTypeDo) FirstOrInit() (*model.ServiceType, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServiceType), nil
	}
}

func (s serviceTypeDo) FirstOrCreate() (*model.ServiceType, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServiceType), nil
	}
}

func (s serviceTypeDo) FindByPage(offset int, limit int) (result []*model.ServiceType, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s serviceTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s *serviceTypeDo) withDO(do gen.Dao) *serviceTypeDo {
	s.DO = *do.(*gen.DO)
	return s
}
